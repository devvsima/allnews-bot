from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from peewee import *
import feedparser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = '6953757040:AAG1Jg5v_sSV3FTGEm7hgncTLVhb0ffL8c0'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SqliteDatabase('users.db')

class BaseModel(Model):
    class Meta:
        database = db

class User(BaseModel):
    user_id = IntegerField(unique=True)
    interests = TextField(null=True)
    sources = TextField(null=True)  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    message_id = IntegerField(null=True)  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

db.connect()
db.create_tables([User])

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
news_cache = {}

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üåê –î–∂–µ—Ä–µ–ª–∞"))
main_keyboard.add(KeyboardButton("‚úèÔ∏è –Ü–Ω—Ç–µ—Ä–µ—Å–∏"))
main_keyboard.add(KeyboardButton("üì∞ –ù–æ–≤–∏–Ω–∏"))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    photo_path = r"D:\!010101010\Python\tg-bots\news\poster.webp"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    caption = ("–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç.\n –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –∑–∞ —Ç–≤–æ—ó–º–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏.\n")
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=caption)
        await bot.send_message(chat_id=message.chat.id, text="–í —Ç–µ–±–µ –∑'—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–∏—Ö —Ç–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏\
            –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –¥–∂–µ—Ä–µ–ª–æ –Ω–æ–≤–∏–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂–µ—à –≥–æ—Ä—Ç–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª!", reply_markup=main_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /sources –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(text='üåê –î–∂–µ—Ä–µ–ª–∞')
async def ask_sources(message: types.Message):
    user, created = User.get_or_create(user_id=message.from_user.id)
    selected_sources = user.sources.split(', ') if user.sources else []
    markup = InlineKeyboardMarkup(row_width=1)
    sources = [
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–∞–≤–¥–∞", "–¢–°–ù", "BBC Ukrainian", "–†–∞–¥—ñ–æ –°–≤–æ–±–æ–¥–∞",
        "–ù–æ–≤–æ–µ –í—Ä–µ–º—è",
        "–£–ù–Ü–ê–ù", "–ï—Å–ø—Ä–µ—Å–æ", "24 –ö–∞–Ω–∞–ª",
        "BBC News", "CNN", "The New York Times", "The Guardian",
        "Al Jazeera", "The Washington Post"
    ]
    for source in sources:
        text = f"{source} {'*' if source in selected_sources else ''}"
        markup.add(InlineKeyboardButton(text, callback_data=f"source_{source}"))
    markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="save_sources"))
    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /interests –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(text='‚úèÔ∏è –Ü–Ω—Ç–µ—Ä–µ—Å–∏')
async def ask_interests(message: types.Message):
    user, created = User.get_or_create(user_id=message.from_user.id)
    selected_interests = user.interests.split(', ') if user.interests else []
    markup = InlineKeyboardMarkup(row_width=1)
    categories = ["–ü–æ–ª—ñ—Ç–∏–∫–∞ üèõÔ∏è", "–ï–∫–æ–Ω–æ–º—ñ–∫–∞ üí∞", "–°–ø–æ—Ä—Ç ‚öΩ", "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó üíª"]
    for category in categories:
        text = f"{category} {'*' if category in selected_interests else ''}"
        markup.add(InlineKeyboardButton(text, callback_data=f"interest_{category}"))
    markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="save_interests"))
    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—ó —ñ–Ω—Ç–µ—Ä–µ—Å–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("source_"))
async def add_source(callback_query: types.CallbackQuery):
    source = callback_query.data.split("_")[1]
    user, created = User.get_or_create(user_id=callback_query.from_user.id)
    sources = user.sources.split(', ') if user.sources else []
    if source not in sources:
        sources.append(source)
    else:
        sources.remove(source)
    user.sources = ', '.join(sources)
    user.save()
    await bot.answer_callback_query(callback_query.id, f"–î–∂–µ—Ä–µ–ª–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await update_sources(callback_query)

async def update_sources(callback_query: types.CallbackQuery):
    user = User.get(User.user_id == callback_query.from_user.id)
    selected_sources = user.sources.split(', ') if user.sources else []
    markup = InlineKeyboardMarkup(row_width=1)
    sources = [
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–∞–≤–¥–∞", "–¢–°–ù", "BBC Ukrainian", "–†–∞–¥—ñ–æ –°–≤–æ–±–æ–¥–∞",
        "–ù–æ–≤–æ–µ –í—Ä–µ–º—è",
        "–£–ù–Ü–ê–ù", "–ï—Å–ø—Ä–µ—Å–æ", "24 –ö–∞–Ω–∞–ª",
        "BBC News", "CNN", "The New York Times", "The Guardian",
        "Al Jazeera", "The Washington Post"
    ]
    for source in sources:
        text = f"{source} {'*' if source in selected_sources else ''}"
        markup.add(InlineKeyboardButton(text, callback_data=f"source_{source}"))
    markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="save_sources"))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í–∏–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω:",
                                reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query_handler(lambda c: c.data.startswith("interest_"))
async def add_interest(callback_query: types.CallbackQuery):
    interest = callback_query.data.split("_")[1]
    user, created = User.get_or_create(user_id=callback_query.from_user.id)
    interests = user.interests.split(', ') if user.interests else []
    if interest not in interests:
        interests.append(interest)
    else:
        interests.remove(interest)
    user.interests = ', '.join(interests)
    user.save()
    await bot.answer_callback_query(callback_query.id, f"–Ü–Ω—Ç–µ—Ä–µ—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await update_interests(callback_query)

async def update_interests(callback_query: types.CallbackQuery):
    user = User.get(User.user_id == callback_query.from_user.id)
    selected_interests = user.interests.split(', ') if user.interests else []
    markup = InlineKeyboardMarkup(row_width=1)
    categories = ["–ü–æ–ª—ñ—Ç–∏–∫–∞ üèõÔ∏è", "–ï–∫–æ–Ω–æ–º—ñ–∫–∞ üí∞", "–°–ø–æ—Ä—Ç ‚öΩ", "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó üíª"]
    for category in categories:
        text = f"{category} {'*' if category in selected_interests else ''}"
        markup.add(InlineKeyboardButton(text, callback_data=f"interest_{category}"))
    markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="save_interests"))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—ó —ñ–Ω—Ç–µ—Ä–µ—Å–∏:",
                                reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "save_sources")
async def save_sources(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í–∞—à –≤–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /interests —â–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∏.",
                                reply_markup=None)

@dp.callback_query_handler(lambda c: c.data == "save_interests")
async def save_interests(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í–∞—à –≤–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /news –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω.",
                                reply_markup=None)

# –ö–æ–º–∞–Ω–¥–∞ /news –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(text="üì∞ –ù–æ–≤–∏–Ω–∏")
async def send_news(message: types.Message):
    user = User.get(User.user_id == message.from_user.id)
    if not user.sources:
        user.sources = "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–∞–≤–¥–∞, –¢–°–ù, BBC Ukrainian, –†–∞–¥—ñ–æ –°–≤–æ–±–æ–¥–∞, –ù–æ–≤–æ–µ –í—Ä–µ–º—è, –õ–Ü–ì–ê.net, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –¢–∏–∂–¥–µ–Ω—å, –ì—Ä–æ–º–∞–¥—Å—å–∫–µ, –£–ù–Ü–ê–ù, –ï—Å–ø—Ä–µ—Å–æ, 24 –ö–∞–Ω–∞–ª, –Ü–Ω—Ç–µ—Ä—Ñ–∞–∫—Å-–£–∫—Ä–∞—ó–Ω–∞, BBC News, CNN, The New York Times, The Guardian, Reuters, Al Jazeera, Bloomberg, The Washington Post"
    if not user.interests:
        user.interests = "–ü–æ–ª—ñ—Ç–∏–∫–∞ üèõÔ∏è, –ï–∫–æ–Ω–æ–º—ñ–∫–∞ üí∞, –°–ø–æ—Ä—Ç ‚öΩ, –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó üíª"
        sources = [
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–∞–≤–¥–∞", "–¢–°–ù", "BBC Ukrainian", "–†–∞–¥—ñ–æ –°–≤–æ–±–æ–¥–∞",
        "–ù–æ–≤–æ–µ –í—Ä–µ–º—è",
        "–£–ù–Ü–ê–ù", "–ï—Å–ø—Ä–µ—Å–æ", "24 –ö–∞–Ω–∞–ª",
        "BBC News", "CNN", "The New York Times", "The Guardian",
        "Al Jazeera", "The Washington Post"
    ]
    news_feed = {
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–∞–≤–¥–∞": "https://www.pravda.com.ua/rss/",
        "–¢–°–ù": "https://tsn.ua/rss",
        "BBC Ukrainian": "http://www.bbc.com/ukrainian/index.xml",
        "–†–∞–¥—ñ–æ –°–≤–æ–±–æ–¥–∞": "https://www.radiosvoboda.org/api/zmgppemq$pp",
        "–ù–æ–≤–æ–µ –í—Ä–µ–º—è": "https://nv.ua/ukr/rss/all.xml",
        "–£–ù–Ü–ê–ù": "https://rss.unian.net/site/news_ukr.rss",
        "–ï—Å–ø—Ä–µ—Å–æ": "https://espreso.tv/rss",
        "24 –ö–∞–Ω–∞–ª": "https://24tv.ua/rss/all.xml",
        "BBC News": "http://feeds.bbci.co.uk/news/rss.xml",
        "CNN": "http://rss.cnn.com/rss/edition.rss",
        "The New York Times": "https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml",
        "The Guardian": "https://www.theguardian.com/international/rss",
        "Al Jazeera": "https://www.aljazeera.com/xml/rss/all.xml",
        "The Washington Post": "http://feeds.washingtonpost.com/rss/world"
    }
    await bot.send_message(message.from_user.id, 'üîç –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω...')

    news_list = []
    for source in user.sources.split(', '):
        feed_url = news_feed.get(source)
        if feed_url:
            feed = feedparser.parse(feed_url)
            for entry in feed.entries[:5]:
                news_list.append({
                    'title': entry.title,
                    'link': entry.link,
                    'source': source,
                    'category': user.interests
                })  # –û–±–º–µ–∂—É—î–º–æ—Å—è 5 –Ω–æ–≤–∏–Ω–∞–º–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞

    news_cache[message.from_user.id] = news_list[:20]  # –û–±–º–µ–∂—É—î–º–æ—Å—è 20 –Ω–æ–≤–∏–Ω–∞–º–∏ –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É

    if news_list:
        await message.reply(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–∏–Ω(–∏).")
        sent_message = await send_news_item(message.chat.id, 0)
        user.message_id = sent_message.message_id
        user.save()
    else:
        await message.reply("–ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def send_news_item(chat_id, index):
    news_list = news_cache.get(chat_id)
    if not news_list:
        return await bot.send_message(chat_id, "–ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    
    if index < 0 or index >= len(news_list):
        return await bot.send_message(chat_id, "–ë—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.")
    news_item = news_list[index]
    text = f"–î–∂–µ—Ä–µ–ª–æ: <blockquote>{news_item['source']}</blockquote>\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <blockquote>{news_item['category']}</blockquote>\n\n{news_item['title']}\n{news_item['link']}"
    markup = InlineKeyboardMarkup()
    next_button = InlineKeyboardButton('–ù–∞—Å—Ç—É–ø–Ω–∞', callback_data=f'next_{index+1}')
    prev_button = InlineKeyboardButton('–ü–æ–ø–µ—Ä–µ–¥–Ω—è', callback_data=f'prev_{index-1}')
    markup.add(prev_button, next_button) if index > 0 else markup.add(next_button)

    return await bot.send_message(chat_id, text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data and (c.data.startswith('next_') or c.data.startswith('prev_')))
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    action = data[0]
    index = int(data[1])
    user = User.get(User.user_id == callback_query.from_user.id)

    await bot.answer_callback_query(callback_query.id)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    if action == 'next' or action == 'prev':
        news_list = news_cache.get(callback_query.message.chat.id)
        if news_list:
            if index < 0 or index >= len(news_list):
                await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                            message_id=callback_query.message.message_id,
                                            text="–ë—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.",
                                            reply_markup=None)
            else:
                news_item = news_list[index]
                text = f"–î–∂–µ—Ä–µ–ª–æ: <blockquote>{news_item['source']}</blockquote>\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <blockquote>{news_item['category']}</blockquote>\n\n{news_item['title']}\n{news_item['link']}"
                markup = InlineKeyboardMarkup()
                next_button = InlineKeyboardButton('–ù–∞—Å—Ç—É–ø–Ω–∞', callback_data=f'next_{index+1}')
                prev_button = InlineKeyboardButton('–ü–æ–ø–µ—Ä–µ–¥–Ω—è', callback_data=f'prev_{index-1}')
                markup.add(prev_button, next_button) if index > 0 else markup.add(next_button)

                await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                            message_id=callback_query.message.message_id,
                                            text=text,
                                            reply_markup=markup,
                                            parse_mode="HTML")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
